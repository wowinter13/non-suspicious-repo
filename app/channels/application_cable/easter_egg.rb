module ApplicationCable
  class EasterEgg
    # Путевые заметки
    # День 1: воспроизвести и украсть
    # В день после собеседа, как и любой простой человек – я обратился к своим богам
    # stackoverflow и github issues. Ведь не бывает такого, что об простые задачи никто б да и не запнулся.
    # Те самые никто:
    # 1. https://github.com/rails/rails/issues/24908
    # 2. https://www.w3.org/Bugs/Public/show_bug.cgi?id=13104
    # 3. https://github.com/faye/websocket-driver-ruby/issues/61
    # 4. https://gist.github.com/radalin/8a250c85a8f9bd8c727a1cf72ea3b188
    # 5. https://github.com/rails/rails/issues/29307
    # 6. etc... еще парочку человек на stackoverflow, которые не поняли че за приколы с этим кабелем

    # Ну ладно, я немного лукавлю. В первый день я еще убил время чтоб вспомнить вебсокеты, посмотреть код
    # который я уже с ними писал и поскачивать всякий софт умеющий тыкать в ws://.
    # Ну и конечно вообще воспроизвести проблему.

    # В ночь на день 1 и день 2 начались поиски виноватых.
    # Я конечно же изучил доку экшен кабеля 3-4 раза туда-обратно в поисках Золотого Черепа
    # Все что мне удалось найти:
    # 1. Кто-то написал ужасно убогий #ping, который просто пингует – наверное тот же человек,
    # который написал #disconnect, который просто пишет дисконнект. Сразу стало понятно, что ping такое себе
    # и надо переписывать реализацию в сторону bidirectional.
    # Вспомнил про запрет на манкипатч – а жаль, уже нашел 10 лучших манкипатчей 2020 года.
    # 2. Нашел полезную штуку periodically – никогда не любил настраивать cron, гемы эти еще скачивать.
    # Еще кст забыл отметить, что дока тоже гавно. Половина полезного функционала не имеет внешнего интерфейса
    # А другая половина без документации. Да и методы инкапсулированы как попало.
    # 3. Не очень расстроился от запрета на редис, до момента пока не понял, что удаление коннекшена можно
    # сделать в 150 разных местах и надо разобраться какое именно удаление норм. Редис конечно кайф,
    # да и с редисом можно делать несколько пингов и накапливать 2-3 подтвержденных разрыва и отписывать.
    # 4. Тесты писать кстати вообще не принято писать у них в либе
    # нет ни одного теста на remote_connections, поставил себе в планы на след-след выходные.
    # Да и на самом деле там в половине мест используется старый синтаксис, библиотеку разнесет к херам
    # при переходе на 3.0.

    # Короче если коротко, я понял что в либе нет нихера внешних ручек. Ну вот нет способа без доступа
    # к кишкам сделать норм пинг.
    # Пришлось обратиться к более древним богам из мира Лавкрафта – зависимостям и спецификациям вебсокетов.

    # День 2. Луч солнца золотого.
    # Зависимости: конкурентный-руби, нио и вебсокет-драйвер.
    # И конечно чуть больше, чем запах напалма по утрам – я люблю долбанные драйвера и их исходники.
    # https://github.com/faye/websocket-driver-ruby
    # Почитав все на свете про этот протокол я понял, что есть несколько решений:
    # 1. you will be notified when tcp connection closes which may take several minutes
    #    ждать пока буфер наполнится или закроется. Долговато.
    # 2. https://tools.ietf.org/html/rfc6455#section-5.5.2
    #    Upon receipt of a Ping frame, an endpoint MUST send a Pong frame in
    #    response, unless it already received a Close frame.
    #    Уже неплохо, где есть пинг, там должен быть и понг. Логично.
    #    Решение: починить пинг понг или писать свой.
    # 3. https://gist.github.com/radalin/8a250c85a8f9bd8c727a1cf72ea3b188
    #    Самописный хартбит – все круто, конечно, но редис и/или манкипатч.
    # 4. https://github.com/rails/rails/issues/29307
    #    For real disconnect solution we need new feature with application
    #    ping/keepalive at ActionCable level. Ну да, ну да, keepalive – как-будто я сразу
    #    не пошел искать интерфейс для keep-alive. Но вообще в треде много умных мыслей.
    # 5. На секунду что-то похожее на золотую монетку сверкнуло буквально в паре сантиметров от глаз.
    #    Я нашел заветные строчки в драйвере: https://github.com/faye/websocket-driver-ruby/issues/61
    # День 3. Золото в грязи.
    #   Обожаю командные игры. И мне было приятно узнать, что не я один не мог понять почему такая
    #   простая задача требует столько движений – рядом был автор грейпа, который тоже восхищался
    #   качеством библиотеки. По итогу стало понятно:
    #   - I didn't realize the socket read can return nil meaning something like a disconnect,
    #      just to confirm, does that mean it's disconnected and is that a special kind of disconnect
    #    - You also need to handle empty string, i.e. read(x > 0) -> nil | "" indicates disconnected.
    #    Ну типа мы какбы все хендлим, но не очень.
    #    !!!!!  Any network-related events like disconnections need to be handled by the caller
    #    !!!!! if your TCP socket becomes disconnected, the driver cannot detect that
    #    !!!!! and you need to handle it yourself.
    #    Бинго! Узнаем что пинг вебдрайвера тоже шикарен – и нам предлагают хендлить самый очевидный
    #    network-разрыв самостоятельно.
    # Ну на самом деле история с ресерчем заканчивается на этой прекрасной ноте.
    # Дальше меня ждал прекрасный websocket.ping yield, который почему-то может ответить и nil, и false
    # и true. А без блока всегда true))))))) Про наличие другого поведения с блоком
    # конечно в документации нихера неочевидно.
    # В общем, не знаю будет ли кто-то это читать, но спасибо даже если я пролетел.
    # Это были клевые выходные и один из самых интересных asessesments, которые я делал за последний год, как минимум.
    # Впереди написать тесты и поискать интерфейс получше чем 3 вызова instance_variable_get.
    # Определенно конструкция топ и у нее есть свои плюсы, но закон Деметры все-таки...
    #

    # Всякие интересности, где были обрывки ценной инфы:
    # 0. https://github.com/rails/rails/issues/24908
    #    Просто веселый тред, где предлагают серверу боксировать вторым номером, а клиенту первым.
    # 1. https://blog.heroku.com/real_time_rails_implementing_websockets_in_rails_5_with_action_cable
    #    Тут просто картинки клевые
    # 2. https://github.com/faye/websocket-driver-ruby/blob/0.7.0/lib/websocket/driver/hybi.rb#L369-L378
    #    https://github.com/faye/faye-websocket-ruby/blob/0.10.7/lib/faye/websocket/api.rb#L52-L57
    #    Виновник торжества
  end
end
